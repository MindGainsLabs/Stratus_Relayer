/**
 * Utilit√°rio para formata√ß√£o moderna de mensagens do Telegram
 */

/**
 * Formata uma mensagem do Discord para um formato moderno no Telegram
 * @param {Object} params - Par√¢metros da mensagem
 * @param {string} params.username - Nome do usu√°rio
 * @param {string} params.content - Conte√∫do da mensagem
 * @param {Object} params.tokenInfo - Informa√ß√µes do token (opcional)
 * @param {Object} params.riskReport - Relat√≥rio de risco (opcional)
 * @returns {string} Mensagem formatada
 */
export const formatTelegramMessage = ({ username, content, tokenInfo, riskReport }) => {
    let formattedMessage = '';

    // Header moderno com separador
    formattedMessage += `‚îÅ‚îÅ‚îÅ üìä **STRATUS** ‚îÅ‚îÅ‚îÅ\n`;
    formattedMessage += `üë§ **${username}**\n\n`;

    // Processa o conte√∫do da mensagem
    const processedContent = processMessageContent(content);
    formattedMessage += processedContent;

    // Adiciona informa√ß√µes do token se dispon√≠vel
    if (tokenInfo) {
        formattedMessage += formatTokenInfo(tokenInfo);
    }

    // Adiciona relat√≥rio de risco se dispon√≠vel
    if (riskReport) {
        formattedMessage += formatRiskReport(riskReport);
    }

    formattedMessage += `\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ`;

    return formattedMessage;
};

/**
 * Processa o conte√∫do da mensagem para melhor formata√ß√£o
 */
const processMessageContent = (content) => {
    if (!content) return '';

    let processed = content;

    // Remove tags HTML residuais
    processed = processed.replace(/<[^>]*>/g, '');

    // Remove refer√™ncias ao RayBot que aparecem ao final das mensagens
    processed = processed.replace(/\s*\|\s*\[ü§ñ RayBot\]\([^)]+\)/g, '');
    
    // Detecta e formata mensagens MULTI BUY primeiro (antes de outros processamentos)
    if (processed.includes('MULTI BUY')) {
        processed = formatMultiBuyMessage(processed);
    }

    // Melhora a formata√ß√£o de emojis e s√≠mbolos
    processed = processed.replace(/üü¢/g, 'üü¢');
    processed = processed.replace(/üîπ/g, '‚Ä¢');
    processed = processed.replace(/üüß/g, 'üü†');
    processed = processed.replace(/‚úä/g, 'üí™');
    processed = processed.replace(/üìâ/g, 'üìâ');
    processed = processed.replace(/üî∫/g, '‚ñ∏');

    // Formata valores monet√°rios (apenas se n√£o foram processados no MULTI BUY)
    if (!processed.includes('MULTI BUY ALERT')) {
        processed = processed.replace(/\$([0-9,]+\.?\d*)/g, 'üí∞ **$$$1**');
    }
    
    // Formata percentuais
    processed = processed.replace(/\(([0-9.]+%)\)/g, 'üìä ($1)');

    // Melhora a formata√ß√£o de links
    processed = formatLinks(processed);

    return processed + '\n';
};

/**
 * Formata especificamente mensagens do tipo MULTI BUY
 */
const formatMultiBuyMessage = (content) => {
    let formatted = content;

    // Melhora o header do MULTI BUY
    formatted = formatted.replace(/‚ÄºÔ∏è üÜïüü¢ MULTI BUY \*\*([^*]+)\*\*/, 'üöÄ **MULTI BUY ALERT** üöÄ\nü™ô **Token: $1**');
    
    // Formata informa√ß√µes das wallets
    formatted = formatted.replace(/\*\*(\d+) wallets\*\* bought/, 'üë• **$1 Wallets** executed buys');
    formatted = formatted.replace(/\*\*Total: ([^*]+)\*\*/, 'üí∞ **Total Volume: $1**');
    
    // Melhora formata√ß√£o de wallets individuais
    formatted = formatted.replace(/üîπ\*\*\(([^)]+)\)\*\*\s*\(([^)]+)\)/g, '‚Ä¢ **Wallet: $1** ‚è±Ô∏è ($2)');
    formatted = formatted.replace(/üî∫\*\*\(([^)]+)\)\*\*\s*\(([^)]+)\)/g, '‚ñ∏ **Wallet: $1** ‚è±Ô∏è ($2)');
    
    // Formata linhas de informa√ß√£o das wallets (sem duplicar $ signs)
    formatted = formatted.replace(/‚îú\*\*([0-9.]+)\s*SOL\s*\|\s*MC\s*\$([^*]+)\*\*/g, '  ‚Ä¢ üíµ **$1 SOL** | üìä **MC $2**');
    formatted = formatted.replace(/‚îîTotal buy:\s*([0-9.]+\s*SOL)\s*\|\s*‚úä([0-9]+%)/g, '  ‚Ü≥ üìà **Total: $1** | üí™ **Hold: $2**');

    return formatted;
};

/**
 * Formata links para ficarem mais organizados
 */
const formatLinks = (content) => {
    const linkPatterns = [
        { name: 'DexScreener', pattern: /\[DS\]\(<([^>]+)>\)/, emoji: 'üìà' },
        { name: 'GMGN', pattern: /\[GMGN\]\(<([^>]+)>\)/, emoji: 'ü¶é' },
        { name: 'Axiom', pattern: /\[AXI\]\(<([^>]+)>\)/, emoji: '‚ö°' },
        { name: 'BullX NEO', pattern: /\[‚≠ê BullX NEO\]\(<([^>]+)>\)/, emoji: '‚≠ê' },
        { name: 'Photon', pattern: /\[Photon\]\(<([^>]+)>\)/, emoji: '‚öõÔ∏è' },
        { name: 'Trojan', pattern: /\[Trojan\]\(<([^>]+)>\)/, emoji: 'üó°Ô∏è' }
    ];

    let processed = content;
    let linksSection = '\n\nüîó **Quick Links:**\n';
    let hasLinks = false;

    linkPatterns.forEach(({ name, pattern, emoji }) => {
        const matches = processed.match(pattern);
        if (matches && matches[1]) {
            linksSection += `${emoji} [${name}](${matches[1]})\n`;
            hasLinks = true;
            processed = processed.replace(pattern, '');
        }
    });

    if (hasLinks) {
        processed += linksSection;
    }

    return processed;
};

/**
 * Formata informa√ß√µes do token
 */
const formatTokenInfo = (tokenInfo) => {
    const { tokenId, marketCap, price } = tokenInfo;
    
    let tokenSection = '\n\nü™ô **Token Info:**\n';
    tokenSection += `üìç **Contract:** \`${tokenId}\`\n`;
    
    if (marketCap) {
        tokenSection += `üíé **Market Cap:** ${marketCap}\n`;
    }
    
    if (price) {
        tokenSection += `üí∞ **Price:** ${price}\n`;
    }

    return tokenSection;
};

/**
 * Formata o relat√≥rio de risco de forma moderna
 */
const formatRiskReport = (report) => {
    if (!report) return '';

    // Verifica se √© um warning para token novo
    if (report.warning) {
        let warningSection = '\n\n‚ö†Ô∏è **TOKEN WARNING**\n';
        warningSection += '‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n';
        warningSection += `üü° **Status:** New Token\n`;
        warningSection += 'üìä **Data:** Not Available\n';
        warningSection += '‚ö†Ô∏è **Caution:** High Risk\n';
        warningSection += '‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n';
        warningSection += '\nüö® **No risk analysis available for this token!**\n';
        warningSection += 'üí° **Recommendation:** Wait for data or proceed with extreme caution\n';
        return warningSection;
    }

    const { token_program, token_type, risks, score, score_normalised } = report;

    let riskSection = '\n\nüõ°Ô∏è **RISK ANALYSIS**\n';
    riskSection += '‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n';
    
    if (token_program) {
        riskSection += `üîß **Program:** ${token_program}\n`;
    }
    
    if (token_type) {
        riskSection += `üìã **Type:** ${token_type}\n`;
    }

    // Score com cores baseadas no risco
    const scoreEmoji = getScoreEmoji(score_normalised);
    riskSection += `${scoreEmoji} **Risk Score:** ${score_normalised || 0}/100\n`;
    riskSection += '‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n';

    // Fatores de risco
    if (risks && risks.length > 0) {
        riskSection += '\n‚ö†Ô∏è **Risk Factors:**\n';
        risks.forEach(risk => {
            const levelEmoji = getRiskLevelEmoji(risk.level);
            riskSection += `${levelEmoji} **${risk.name}**\n`;
            riskSection += `  ‚Ü≥ ${risk.description}`;
            if (risk.value) {
                riskSection += ` (${risk.value})`;
            }
            riskSection += `\n  ‚Ü≥ Score: ${risk.score}\n\n`;
        });
    } else {
        riskSection += '\n‚úÖ **No significant risks detected**\n';
    }

    return riskSection;
};

/**
 * Retorna emoji baseado no score de risco
 */
const getScoreEmoji = (score) => {
    if (score <= 30) return 'üü¢';
    if (score <= 60) return 'üü°';
    if (score <= 80) return 'üü†';
    return 'üî¥';
};

/**
 * Retorna emoji baseado no n√≠vel de risco
 */
const getRiskLevelEmoji = (level) => {
    switch (level?.toLowerCase()) {
        case 'low': return 'üü¢';
        case 'medium': return 'üü°';
        case 'high': return 'üü†';
        case 'critical': return 'üî¥';
        default: return '‚ö™';
    }
};

/**
 * Extrai informa√ß√µes do token de uma mensagem
 */
export const extractTokenInfo = (description) => {
    if (!description) return null;

    // Extrai token ID - ordem de prioridade para capturar o token correto
    const tokenIdMatch = 
        // Primeiro tenta capturar token entre backticks (mais confi√°vel)
        description.match(/`([A-Za-z0-9]{32,})`/)?.[1] ||
        // Depois tenta URLs espec√≠ficas
        description.match(/https:\/\/gmgn\.ai\/sol\/token\/([A-Za-z0-9_-]+)/)?.[1] ||
        description.match(/https:\/\/dexscreener\.com\/solana\/([A-Za-z0-9]{32,})/)?.[1] ||
        description.match(/https:\/\/axiom\.trade\/t\/([A-Za-z0-9]{32,})/)?.[1] ||
        description.match(/https:\/\/neo\.bullx\.io\/terminal\?chainId=\d+&address=([A-Za-z0-9]{32,})/)?.[1] ||
        description.match(/https:\/\/t\.me\/ray_cyan_bot\?start=buy__([A-Za-z0-9]{32,})/)?.[1] ||
        description.match(/https:\/\/photon-sol\.tinyastro\.io\/en\/lp\/([A-Za-z0-9]{32,})/)?.[1] ||
        description.match(/https:\/\/t\.me\/ape_pro_solana_bot\?start=ape_ray_([A-Za-z0-9]{32,})/)?.[1] ||
        description.match(/https:\/\/t\.me\/BloomSolana_bot\?start=ref_RAYBOT_ca_([A-Za-z0-9]{32,})/)?.[1] ||
        description.match(/https:\/\/t\.me\/TradeonNovaBot\?start=r-raybot-([A-Za-z0-9]{32,})/)?.[1] ||
        description.match(/https:\/\/axiom\.trade\/t\/([A-Za-z0-9]{32,})\/@raybot/)?.[1];

    if (!tokenIdMatch) return null;

    // Extrai market cap - melhorada para capturar diferentes formatos
    const marketCapMatch = description.match(/MC[:\s]*\$?([0-9,]+\.?\d*[MKB]?)/i);
    const marketCap = marketCapMatch ? `$${marketCapMatch[1]}` : null;

    // Extrai pre√ßo
    const priceMatch = description.match(/@\$([0-9.]+)/);
    const price = priceMatch ? `$${priceMatch[1]}` : null;

    return {
        tokenId: tokenIdMatch,
        marketCap,
        price
    };
};
