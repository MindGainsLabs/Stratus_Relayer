#!/bin/bash

# üîç Validador de Collections do Stratus Relayer
# Verifica se as collections est√£o corretamente formatadas e completas

#    if grep -q "Crypto Tracking WebSocket" collections/stratus_relayer_websocket_collection.json; then
        test_result 0 "WebSocket Collection cont√©m se√ß√£o de Crypto Tracking"
    else
        test_result 1 "WebSocket Collection sem se√ß√£o de Crypto Tracking"
    fiara o diret√≥rio do projeto
cd "$(dirname "$0")"

echo "üîç VALIDANDO COLLECTIONS DO STRATUS RELAYER"
echo "=============================================="

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Contador de testes
TOTAL_TESTS=0
PASSED_TESTS=0

# Fun√ß√£o para testar
test_result() {
    TOTAL_TESTS=$((TOTAL_TESTS + 1))
    if [ $1 -eq 0 ]; then
        echo -e "‚úÖ ${GREEN}PASSOU${NC}: $2"
        PASSED_TESTS=$((PASSED_TESTS + 1))
    else
        echo -e "‚ùå ${RED}FALHOU${NC}: $2"
    fi
}

echo ""
echo "üìã 1. Verificando exist√™ncia dos arquivos..."
echo "--------------------------------------------"

# Verificar se arquivos existem
if [ -f "collections/stratus_relayer_api_collection.json" ]; then
    test_result 0 "API Collection existe"
else
    test_result 1 "API Collection n√£o encontrada"
fi

if [ -f "collections/stratus_relayer_websocket_collection.json" ]; then
    test_result 0 "WebSocket Collection existe"
else
    test_result 1 "WebSocket Collection n√£o encontrada"
fi

if [ -f "collections/README.md" ]; then
    test_result 0 "README.md existe"
else
    test_result 1 "README.md n√£o encontrado"
fi

echo ""
echo "üîß 2. Validando formato JSON..."
echo "------------------------------"

# Validar JSON da API Collection
if command -v jq &> /dev/null; then
    if jq empty collections/stratus_relayer_api_collection.json 2>/dev/null; then
        test_result 0 "API Collection tem JSON v√°lido"
    else
        test_result 1 "API Collection tem JSON inv√°lido"
    fi

    if jq empty collections/stratus_relayer_websocket_collection.json 2>/dev/null; then
        test_result 0 "WebSocket Collection tem JSON v√°lido"
    else
        test_result 1 "WebSocket Collection tem JSON inv√°lido"
    fi
else
    echo -e "${YELLOW}‚ö†Ô∏è  jq n√£o instalado - pulando valida√ß√£o JSON${NC}"
fi

echo ""
echo "üìä 3. Verificando estrutura das collections..."
echo "----------------------------------------------"

# Verificar estrutura da API Collection
if [ -f "collections/stratus_relayer_api_collection.json" ]; then
    # Verificar se cont√©m campos obrigat√≥rios
    if grep -q "Stratus Relayer API Collection" collections/stratus_relayer_api_collection.json; then
        test_result 0 "API Collection tem nome correto"
    else
        test_result 1 "API Collection nome incorreto"
    fi

    if grep -q "üîê Autentica√ß√£o" collections/stratus_relayer_api_collection.json; then
        test_result 0 "API Collection cont√©m se√ß√£o de Autentica√ß√£o"
    else
        test_result 1 "API Collection sem se√ß√£o de Autentica√ß√£o"
    fi

    if grep -q "üì® Mensagens Discord" collections/stratus_relayer_api_collection.json; then
        test_result 0 "API Collection cont√©m se√ß√£o de Mensagens"
    else
        test_result 1 "API Collection sem se√ß√£o de Mensagens"
    fi

    if grep -q "ü™ô An√°lise de Criptomoedas" collections/stratus_relayer_api_collection.json; then
        test_result 0 "API Collection cont√©m se√ß√£o de Crypto"
    else
        test_result 1 "API Collection sem se√ß√£o de Crypto"
    fi

    if grep -q "üì° Server-Sent Events" collections/stratus_relayer_api_collection.json; then
        test_result 0 "API Collection cont√©m se√ß√£o de SSE"
    else
        test_result 1 "API Collection sem se√ß√£o de SSE"
    fi
fi

# Verificar estrutura da WebSocket Collection
if [ -f "collections/stratus_relayer_websocket_collection.json" ]; then
    if grep -q "Stratus Relayer WebSocket Collection" collections/stratus_relayer_websocket_collection.json; then
        test_result 0 "WebSocket Collection tem nome correto"
    else
        test_result 1 "WebSocket Collection nome incorreto"
    fi

    if grep -q "üîå Conex√£o WebSocket" collections/stratus_relayer_websocket_collection.json; then
        test_result 0 "WebSocket Collection cont√©m se√ß√£o de Conex√£o"
    else
        test_result 1 "WebSocket Collection sem se√ß√£o de Conex√£o"
    fi

    if grep -q "üîê Autentica√ß√£o WebSocket" collections/stratus_relayer_websocket_collection.json; then
        test_result 0 "WebSocket Collection cont√©m se√ß√£o de Auth"
    else
        test_result 1 "WebSocket Collection sem se√ß√£o de Auth"
    fi

    if grep -q "ÔøΩ Crypto Tracking WebSocket" collections/stratus_relayer_websocket_collection.json; then
        test_result 0 "WebSocket Collection cont√©m se√ß√£o de Crypto Tracking"
    else
        test_result 1 "WebSocket Collection sem se√ß√£o de Crypto Tracking"
    fi
fi

echo ""
echo "üåê 4. Verificando URLs e vari√°veis..."
echo "------------------------------------"

# Verificar URLs nas collections
if grep -q "srv800316.hstgr.cloud:8081" collections/stratus_relayer_api_collection.json; then
    test_result 0 "API Collection cont√©m URL de produ√ß√£o"
else
    test_result 1 "API Collection sem URL de produ√ß√£o"
fi

if grep -q "localhost:8081" collections/stratus_relayer_api_collection.json; then
    test_result 0 "API Collection cont√©m URL local"
else
    test_result 1 "API Collection sem URL local"
fi

if grep -q "ws://srv800316.hstgr.cloud:8081" collections/stratus_relayer_websocket_collection.json; then
    test_result 0 "WebSocket Collection cont√©m URL WebSocket"
else
    test_result 1 "WebSocket Collection sem URL WebSocket"
fi

echo ""
echo "üìù 5. Verificando endpoints principais..."
echo "----------------------------------------"

# Verificar endpoints principais na API Collection
if grep -q "retrieve-messages" collections/stratus_relayer_api_collection.json; then
    test_result 0 "Endpoint retrieve-messages presente"
else
    test_result 1 "Endpoint retrieve-messages ausente"
fi

if grep -q "structured-data" collections/stratus_relayer_api_collection.json; then
    test_result 0 "Endpoint structured-data presente"
else
    test_result 1 "Endpoint structured-data ausente"
fi

if grep -q "sse/stream" collections/stratus_relayer_api_collection.json; then
    test_result 0 "Endpoint SSE stream presente"
else
    test_result 1 "Endpoint SSE stream ausente"
fi

# Verificar eventos WebSocket
if grep -q '"authenticate"' collections/stratus_relayer_websocket_collection.json; then
    test_result 0 "Evento WebSocket authenticate presente"
else
    test_result 1 "Evento WebSocket authenticate ausente"
fi

if grep -q '"subscribe-crypto-tracking"' collections/stratus_relayer_websocket_collection.json; then
    test_result 0 "Evento WebSocket subscribe-crypto-tracking presente"
else
    test_result 1 "Evento WebSocket subscribe-crypto-tracking ausente"
fi

echo ""
echo "üìÑ 6. Verificando documenta√ß√£o..."
echo "--------------------------------"

if [ -f "collections/README.md" ]; then
    if grep -q "Stratus Relayer API Collections" collections/README.md; then
        test_result 0 "README cont√©m t√≠tulo correto"
    else
        test_result 1 "README t√≠tulo incorreto"
    fi

    if grep -q "Collections Dispon√≠veis" collections/README.md; then
        test_result 0 "README cont√©m se√ß√£o de collections"
    else
        test_result 1 "README sem se√ß√£o de collections"
    fi

    if grep -q "Como Usar" collections/README.md; then
        test_result 0 "README cont√©m guia de uso"
    else
        test_result 1 "README sem guia de uso"
    fi
fi

echo ""
echo "üìä RESUMO DOS TESTES"
echo "===================="
echo -e "‚úÖ Testes aprovados: ${GREEN}$PASSED_TESTS${NC}"
echo -e "‚ùå Testes falharam: ${RED}$((TOTAL_TESTS - PASSED_TESTS))${NC}"
echo -e "üìã Total de testes: ${BLUE}$TOTAL_TESTS${NC}"

# Calcular taxa de sucesso
SUCCESS_RATE=$(( (PASSED_TESTS * 100) / TOTAL_TESTS ))
echo -e "üìà Taxa de sucesso: ${GREEN}$SUCCESS_RATE%${NC}"

echo ""
if [ $PASSED_TESTS -eq $TOTAL_TESTS ]; then
    echo -e "üéâ ${GREEN}TODAS AS COLLECTIONS EST√ÉO V√ÅLIDAS!${NC}"
    echo "‚úÖ Pronto para usar no Postman"
else
    echo -e "‚ö†Ô∏è  ${YELLOW}Algumas valida√ß√µes falharam${NC}"
    echo "üîß Verifique os erros acima"
fi

echo ""
echo "üöÄ PR√ìXIMOS PASSOS:"
echo "-------------------"
echo "1. Importe as collections no Postman:"
echo "   ‚Ä¢ collections/stratus_relayer_api_collection.json"
echo "   ‚Ä¢ collections/stratus_relayer_websocket_collection.json"
echo ""
echo "2. Configure as vari√°veis de ambiente:"
echo "   ‚Ä¢ baseUrl: http://srv800316.hstgr.cloud:8081"
echo "   ‚Ä¢ wsBaseUrl: ws://srv800316.hstgr.cloud:8081"
echo "   ‚Ä¢ apiToken: seu-token-da-api"
echo ""
echo "3. Teste a conectividade:"
echo "   ‚Ä¢ Execute GET /ping"
echo "   ‚Ä¢ Execute POST /api/retrieve-messages"
echo ""
echo "4. Acesse a documenta√ß√£o:"
echo "   ‚Ä¢ Leia collections/README.md"
echo "   ‚Ä¢ Visite http://srv800316.hstgr.cloud:8081/api-docs"

echo ""
echo "üìö Collections do Stratus Relayer v1.0.0 - Valida√ß√£o conclu√≠da!"
